import boto3
import json
from datetime import datetime, timedelta
from decimal import Decimal

# AWS resources
dynamodb = boto3.resource('dynamodb')
sqs = boto3.client('sqs')
location_client = boto3.client('location')

DELIVERY_TRACKING_TABLE = "Delivery_Tracking"
QUEUE_URL = ""
ROUTE_CALCULATOR_NAME = ""
STEPS_TO_COMPLETE = 3  # Number of steps to complete delivery

delivery_tracking_table = dynamodb.Table(DELIVERY_TRACKING_TABLE)

def lambda_handler(event, context):
    try:
        # Scan the Delivery Tracking Table for orders in transit
        response = delivery_tracking_table.scan(
            FilterExpression="order_status = :in_transit",
            ExpressionAttributeValues={":in_transit": "OUT_FOR_DELIVERY"}
        )

        orders = response.get('Items', [])
        for order in orders:
            order_id = order['order_id']
            user_id = order['user_id']
            restaurant_id = order['restaurant_id']
            current_location = order['current_location']
            destination = order['destination']
            current_step = int(order.get('current_step', 0))
            route_steps = order.get('route_steps', [])

            print(f"Processing delivery for order_id: {order_id}, step {current_step} of {STEPS_TO_COMPLETE}")

            # Calculate the route if not already calculated
            if not route_steps:
                route_steps = calculate_route_steps(current_location, destination)
                if not route_steps:
                    print(f"No route found for order {order_id}. Skipping.")
                    continue
                
                # Divide the route into equal segments
                simplified_steps = simplify_route(route_steps, STEPS_TO_COMPLETE)
                update_route_steps(order_id, simplified_steps)
                route_steps = simplified_steps

            # Move to next step if not at destination
            if current_step < STEPS_TO_COMPLETE:
                next_location = interpolate_position(
                    route_steps,
                    current_step,
                    STEPS_TO_COMPLETE
                )

                remaining_steps = STEPS_TO_COMPLETE - (current_step + 1)
                update_current_location(order_id, next_location, remaining_steps, current_step + 1)

                # Mark as delivered if this was the final step
                if current_step == STEPS_TO_COMPLETE - 1:
                    print(f"Order {order_id} has been delivered.")
                    push_to_queue(order_id, user_id, restaurant_id, "DELIVERED")
                    mark_order_delivered(order_id)

        return {"message": f"Processed {len(orders)} orders in transit."}

    except Exception as e:
        print(f"Error processing orders: {str(e)}")
        raise

def simplify_route(route_steps, num_steps):
    """
    Simplify the route into the desired number of steps.
    """
    if not route_steps:
        return []

    # For a single route step, create intermediate points
    start_pos = route_steps[0]["StartPosition"]
    end_pos = route_steps[0]["EndPosition"]
    total_distance = route_steps[0]["Distance"]
    
    simplified = []
    for i in range(num_steps):
        progress = float(i) / float(num_steps)  # Convert to float for calculations
        interpolated_position = [
            Decimal(str(float(start_pos[0]) + (float(end_pos[0]) - float(start_pos[0])) * progress)),
            Decimal(str(float(start_pos[1]) + (float(end_pos[1]) - float(start_pos[1])) * progress))
        ]
        next_progress = float(i + 1) / float(num_steps)
        next_position = [
            Decimal(str(float(start_pos[0]) + (float(end_pos[0]) - float(start_pos[0])) * next_progress)),
            Decimal(str(float(start_pos[1]) + (float(end_pos[1]) - float(start_pos[1])) * next_progress))
        ]
        
        # Convert all numerical values to Decimal for DynamoDB
        simplified.append({
            "StartPosition": interpolated_position,
            "EndPosition": next_position,
            "Distance": Decimal(str(float(total_distance) / float(num_steps))),
            "DurationSeconds": Decimal(str(float(route_steps[0]["DurationSeconds"]) / float(num_steps)))
        })
    
    return simplified

def calculate_route_steps(current_location, destination):
    """
    Calculate the full route steps using AWS Location Service.
    """
    try:
        # Convert Decimal to float for AWS Location Service
        current_location_float = {
            "lon": float(current_location['lon']),
            "lat": float(current_location['lat'])
        }
        destination_float = {
            "lon": float(destination['lon']),
            "lat": float(destination['lat'])
        }

        response = location_client.calculate_route(
            CalculatorName=ROUTE_CALCULATOR_NAME,
            DeparturePosition=[current_location_float['lon'], current_location_float['lat']],
            DestinationPosition=[destination_float['lon'], destination_float['lat']]
        )

        # Extract just the start and end positions from the route and convert to Decimal
        if 'Legs' in response and response['Legs']:
            route_leg = response['Legs'][0]
            return [{
                "StartPosition": [Decimal(str(x)) for x in route_leg['StartPosition']],
                "EndPosition": [Decimal(str(x)) for x in route_leg['EndPosition']],
                "Distance": Decimal(str(route_leg['Distance'])),
                "DurationSeconds": Decimal(str(route_leg['DurationSeconds']))
            }]
        
        print("No valid route found.")
        return []

    except Exception as e:
        print(f"Error calculating route steps: {str(e)}")
        return []

def interpolate_position(route_steps, current_step, total_steps):
    """
    Calculate the next position based on the current step.
    """
    if not route_steps or current_step >= len(route_steps):
        return None

    next_position = route_steps[current_step]["EndPosition"]
    return {
        'lat': next_position[1],  # Already in Decimal format from simplify_route
        'lon': next_position[0]   # Already in Decimal format from simplify_route
    }

def update_route_steps(order_id, route_steps):
    """
    Store the calculated route steps in the delivery tracking table.
    """
    try:
        delivery_tracking_table.update_item(
            Key={"order_id": order_id},
            UpdateExpression="SET route_steps = :steps, current_step = :step",
            ExpressionAttributeValues={
                ":steps": route_steps,
                ":step": 0
            }
        )
        print(f"Route steps stored for order {order_id}.")
    except Exception as e:
        print(f"Error updating route steps for order {order_id}: {str(e)}")
        raise


def update_current_location(order_id, next_location, remaining_steps, next_step):
    """
    Updates the current location, waiting time (stored in eta field), and step progress in the delivery tracking table.
    """
    try:
        # Calculate waiting time (5 minutes per remaining step)
        waiting_minutes = remaining_steps * 5
        waiting_time = f"{waiting_minutes} minutes"
        
        delivery_tracking_table.update_item(
            Key={"order_id": order_id},
            UpdateExpression="""
                SET current_location = :location,
                    eta = :waiting_time,
                    current_step = :next_step,
                    last_updated = :timestamp
            """,
            ExpressionAttributeValues={
                ":location": next_location,
                ":waiting_time": waiting_time,
                ":next_step": next_step,
                ":timestamp": datetime.utcnow().isoformat()
            }
        )
        print(f"Order {order_id}: Updated location to {next_location}, Waiting time: {waiting_time}, Step: {next_step}")
    except Exception as e:
        print(f"Error updating location for order {order_id}: {str(e)}")
        raise

def push_to_queue(order_id, user_id, restaurant_id, status):
    """
    Pushes a delivered status message to SQS.
    """
    sqs_message = {
        'order_id': order_id,
        'user_id': user_id,
        'restaurant_id': restaurant_id,
        'status': status,
        'timestamp': datetime.utcnow().isoformat()
    }
    try:
        sqs.send_message(
            QueueUrl=QUEUE_URL,
            MessageBody=json.dumps(sqs_message)
        )
        print(f"Pushed message to Q1: {sqs_message}")
    except Exception as e:
        print(f"Error pushing message to Q1 for order {order_id}: {str(e)}")
        raise


def mark_order_delivered(order_id):
    """
    Marks the order as delivered by adding a TTL to the record for automatic deletion.
    """
    try:
        ttl_timestamp = int((datetime.utcnow() + timedelta(days=1)).timestamp())

        # Update the delivery tracking table to include TTL
        delivery_tracking_table.update_item(
            Key={"order_id": order_id},
            UpdateExpression="SET #ttl_attr = :ttl_value",
            ExpressionAttributeNames={"#ttl_attr": "ttl"},  # Alias for 'ttl'
            ExpressionAttributeValues={":ttl_value": ttl_timestamp}
        )
        print(f"Marked order {order_id} as delivered and added TTL.")
    except ClientError as e:
        print(f"Error marking order {order_id} as delivered: {e.response['Error']['Message']}")
        raise
